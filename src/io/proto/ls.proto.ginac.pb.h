// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ls.proto.ginac.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ls_2eproto_2eginac_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ls_2eproto_2eginac_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ls_2eproto_2eginac_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ls_2eproto_2eginac_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ls_2eproto_2eginac_2eproto;
namespace ls {
namespace proto {
namespace ginac {
class ex;
struct exDefaultTypeInternal;
extern exDefaultTypeInternal _ex_default_instance_;
class lst;
struct lstDefaultTypeInternal;
extern lstDefaultTypeInternal _lst_default_instance_;
class symbol;
struct symbolDefaultTypeInternal;
extern symbolDefaultTypeInternal _symbol_default_instance_;
}  // namespace ginac
}  // namespace proto
}  // namespace ls
PROTOBUF_NAMESPACE_OPEN
template<> ::ls::proto::ginac::ex* Arena::CreateMaybeMessage<::ls::proto::ginac::ex>(Arena*);
template<> ::ls::proto::ginac::lst* Arena::CreateMaybeMessage<::ls::proto::ginac::lst>(Arena*);
template<> ::ls::proto::ginac::symbol* Arena::CreateMaybeMessage<::ls::proto::ginac::symbol>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ls {
namespace proto {
namespace ginac {

// ===================================================================

class symbol PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ls.proto.ginac.symbol) */ {
 public:
  inline symbol() : symbol(nullptr) {}
  ~symbol() override;
  explicit constexpr symbol(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  symbol(const symbol& from);
  symbol(symbol&& from) noexcept
    : symbol() {
    *this = ::std::move(from);
  }

  inline symbol& operator=(const symbol& from) {
    CopyFrom(from);
    return *this;
  }
  inline symbol& operator=(symbol&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const symbol& default_instance() {
    return *internal_default_instance();
  }
  static inline const symbol* internal_default_instance() {
    return reinterpret_cast<const symbol*>(
               &_symbol_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(symbol& a, symbol& b) {
    a.Swap(&b);
  }
  inline void Swap(symbol* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(symbol* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline symbol* New() const final {
    return CreateMaybeMessage<symbol>(nullptr);
  }

  symbol* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<symbol>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const symbol& from);
  void MergeFrom(const symbol& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(symbol* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ls.proto.ginac.symbol";
  }
  protected:
  explicit symbol(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:ls.proto.ginac.symbol)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_ls_2eproto_2eginac_2eproto;
};
// -------------------------------------------------------------------

class ex PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ls.proto.ginac.ex) */ {
 public:
  inline ex() : ex(nullptr) {}
  ~ex() override;
  explicit constexpr ex(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ex(const ex& from);
  ex(ex&& from) noexcept
    : ex() {
    *this = ::std::move(from);
  }

  inline ex& operator=(const ex& from) {
    CopyFrom(from);
    return *this;
  }
  inline ex& operator=(ex&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ex& default_instance() {
    return *internal_default_instance();
  }
  static inline const ex* internal_default_instance() {
    return reinterpret_cast<const ex*>(
               &_ex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ex& a, ex& b) {
    a.Swap(&b);
  }
  inline void Swap(ex* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ex* New() const final {
    return CreateMaybeMessage<ex>(nullptr);
  }

  ex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ex>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ex& from);
  void MergeFrom(const ex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ex* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ls.proto.ginac.ex";
  }
  protected:
  explicit ex(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolsFieldNumber = 2,
    kArchiveFieldNumber = 1,
  };
  // repeated .ls.proto.ginac.symbol symbols = 2;
  int symbols_size() const;
  private:
  int _internal_symbols_size() const;
  public:
  void clear_symbols();
  ::ls::proto::ginac::symbol* mutable_symbols(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ls::proto::ginac::symbol >*
      mutable_symbols();
  private:
  const ::ls::proto::ginac::symbol& _internal_symbols(int index) const;
  ::ls::proto::ginac::symbol* _internal_add_symbols();
  public:
  const ::ls::proto::ginac::symbol& symbols(int index) const;
  ::ls::proto::ginac::symbol* add_symbols();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ls::proto::ginac::symbol >&
      symbols() const;

  // optional bytes archive = 1;
  bool has_archive() const;
  private:
  bool _internal_has_archive() const;
  public:
  void clear_archive();
  const std::string& archive() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_archive(ArgT0&& arg0, ArgT... args);
  std::string* mutable_archive();
  std::string* release_archive();
  void set_allocated_archive(std::string* archive);
  private:
  const std::string& _internal_archive() const;
  void _internal_set_archive(const std::string& value);
  std::string* _internal_mutable_archive();
  public:

  // @@protoc_insertion_point(class_scope:ls.proto.ginac.ex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ls::proto::ginac::symbol > symbols_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr archive_;
  friend struct ::TableStruct_ls_2eproto_2eginac_2eproto;
};
// -------------------------------------------------------------------

class lst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ls.proto.ginac.lst) */ {
 public:
  inline lst() : lst(nullptr) {}
  ~lst() override;
  explicit constexpr lst(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  lst(const lst& from);
  lst(lst&& from) noexcept
    : lst() {
    *this = ::std::move(from);
  }

  inline lst& operator=(const lst& from) {
    CopyFrom(from);
    return *this;
  }
  inline lst& operator=(lst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const lst& default_instance() {
    return *internal_default_instance();
  }
  static inline const lst* internal_default_instance() {
    return reinterpret_cast<const lst*>(
               &_lst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(lst& a, lst& b) {
    a.Swap(&b);
  }
  inline void Swap(lst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(lst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline lst* New() const final {
    return CreateMaybeMessage<lst>(nullptr);
  }

  lst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<lst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const lst& from);
  void MergeFrom(const lst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(lst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ls.proto.ginac.lst";
  }
  protected:
  explicit lst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExpressionsFieldNumber = 1,
  };
  // repeated .ls.proto.ginac.ex expressions = 1;
  int expressions_size() const;
  private:
  int _internal_expressions_size() const;
  public:
  void clear_expressions();
  ::ls::proto::ginac::ex* mutable_expressions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ls::proto::ginac::ex >*
      mutable_expressions();
  private:
  const ::ls::proto::ginac::ex& _internal_expressions(int index) const;
  ::ls::proto::ginac::ex* _internal_add_expressions();
  public:
  const ::ls::proto::ginac::ex& expressions(int index) const;
  ::ls::proto::ginac::ex* add_expressions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ls::proto::ginac::ex >&
      expressions() const;

  // @@protoc_insertion_point(class_scope:ls.proto.ginac.lst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ls::proto::ginac::ex > expressions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ls_2eproto_2eginac_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// symbol

// optional string name = 1;
inline bool symbol::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool symbol::has_name() const {
  return _internal_has_name();
}
inline void symbol::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& symbol::name() const {
  // @@protoc_insertion_point(field_get:ls.proto.ginac.symbol.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void symbol::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:ls.proto.ginac.symbol.name)
}
inline std::string* symbol::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ls.proto.ginac.symbol.name)
  return _internal_mutable_name();
}
inline const std::string& symbol::_internal_name() const {
  return name_.Get();
}
inline void symbol::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* symbol::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* symbol::release_name() {
  // @@protoc_insertion_point(field_release:ls.proto.ginac.symbol.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void symbol::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ls.proto.ginac.symbol.name)
}

// -------------------------------------------------------------------

// ex

// optional bytes archive = 1;
inline bool ex::_internal_has_archive() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ex::has_archive() const {
  return _internal_has_archive();
}
inline void ex::clear_archive() {
  archive_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ex::archive() const {
  // @@protoc_insertion_point(field_get:ls.proto.ginac.ex.archive)
  return _internal_archive();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ex::set_archive(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 archive_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:ls.proto.ginac.ex.archive)
}
inline std::string* ex::mutable_archive() {
  // @@protoc_insertion_point(field_mutable:ls.proto.ginac.ex.archive)
  return _internal_mutable_archive();
}
inline const std::string& ex::_internal_archive() const {
  return archive_.Get();
}
inline void ex::_internal_set_archive(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  archive_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ex::_internal_mutable_archive() {
  _has_bits_[0] |= 0x00000001u;
  return archive_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ex::release_archive() {
  // @@protoc_insertion_point(field_release:ls.proto.ginac.ex.archive)
  if (!_internal_has_archive()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return archive_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ex::set_allocated_archive(std::string* archive) {
  if (archive != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  archive_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), archive,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ls.proto.ginac.ex.archive)
}

// repeated .ls.proto.ginac.symbol symbols = 2;
inline int ex::_internal_symbols_size() const {
  return symbols_.size();
}
inline int ex::symbols_size() const {
  return _internal_symbols_size();
}
inline void ex::clear_symbols() {
  symbols_.Clear();
}
inline ::ls::proto::ginac::symbol* ex::mutable_symbols(int index) {
  // @@protoc_insertion_point(field_mutable:ls.proto.ginac.ex.symbols)
  return symbols_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ls::proto::ginac::symbol >*
ex::mutable_symbols() {
  // @@protoc_insertion_point(field_mutable_list:ls.proto.ginac.ex.symbols)
  return &symbols_;
}
inline const ::ls::proto::ginac::symbol& ex::_internal_symbols(int index) const {
  return symbols_.Get(index);
}
inline const ::ls::proto::ginac::symbol& ex::symbols(int index) const {
  // @@protoc_insertion_point(field_get:ls.proto.ginac.ex.symbols)
  return _internal_symbols(index);
}
inline ::ls::proto::ginac::symbol* ex::_internal_add_symbols() {
  return symbols_.Add();
}
inline ::ls::proto::ginac::symbol* ex::add_symbols() {
  // @@protoc_insertion_point(field_add:ls.proto.ginac.ex.symbols)
  return _internal_add_symbols();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ls::proto::ginac::symbol >&
ex::symbols() const {
  // @@protoc_insertion_point(field_list:ls.proto.ginac.ex.symbols)
  return symbols_;
}

// -------------------------------------------------------------------

// lst

// repeated .ls.proto.ginac.ex expressions = 1;
inline int lst::_internal_expressions_size() const {
  return expressions_.size();
}
inline int lst::expressions_size() const {
  return _internal_expressions_size();
}
inline void lst::clear_expressions() {
  expressions_.Clear();
}
inline ::ls::proto::ginac::ex* lst::mutable_expressions(int index) {
  // @@protoc_insertion_point(field_mutable:ls.proto.ginac.lst.expressions)
  return expressions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ls::proto::ginac::ex >*
lst::mutable_expressions() {
  // @@protoc_insertion_point(field_mutable_list:ls.proto.ginac.lst.expressions)
  return &expressions_;
}
inline const ::ls::proto::ginac::ex& lst::_internal_expressions(int index) const {
  return expressions_.Get(index);
}
inline const ::ls::proto::ginac::ex& lst::expressions(int index) const {
  // @@protoc_insertion_point(field_get:ls.proto.ginac.lst.expressions)
  return _internal_expressions(index);
}
inline ::ls::proto::ginac::ex* lst::_internal_add_expressions() {
  return expressions_.Add();
}
inline ::ls::proto::ginac::ex* lst::add_expressions() {
  // @@protoc_insertion_point(field_add:ls.proto.ginac.lst.expressions)
  return _internal_add_expressions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ls::proto::ginac::ex >&
lst::expressions() const {
  // @@protoc_insertion_point(field_list:ls.proto.ginac.lst.expressions)
  return expressions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ginac
}  // namespace proto
}  // namespace ls

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ls_2eproto_2eginac_2eproto
