// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ls.proto.systems.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ls_2eproto_2esystems_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ls_2eproto_2esystems_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ls.proto.eigen.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ls_2eproto_2esystems_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ls_2eproto_2esystems_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ls_2eproto_2esystems_2eproto;
namespace ls {
namespace proto {
namespace systems {
class StateSpace;
struct StateSpaceDefaultTypeInternal;
extern StateSpaceDefaultTypeInternal _StateSpace_default_instance_;
class TransferFunction;
struct TransferFunctionDefaultTypeInternal;
extern TransferFunctionDefaultTypeInternal _TransferFunction_default_instance_;
}  // namespace systems
}  // namespace proto
}  // namespace ls
PROTOBUF_NAMESPACE_OPEN
template<> ::ls::proto::systems::StateSpace* Arena::CreateMaybeMessage<::ls::proto::systems::StateSpace>(Arena*);
template<> ::ls::proto::systems::TransferFunction* Arena::CreateMaybeMessage<::ls::proto::systems::TransferFunction>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ls {
namespace proto {
namespace systems {

// ===================================================================

class StateSpace PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ls.proto.systems.StateSpace) */ {
 public:
  inline StateSpace() : StateSpace(nullptr) {}
  ~StateSpace() override;
  explicit constexpr StateSpace(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StateSpace(const StateSpace& from);
  StateSpace(StateSpace&& from) noexcept
    : StateSpace() {
    *this = ::std::move(from);
  }

  inline StateSpace& operator=(const StateSpace& from) {
    CopyFrom(from);
    return *this;
  }
  inline StateSpace& operator=(StateSpace&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StateSpace& default_instance() {
    return *internal_default_instance();
  }
  static inline const StateSpace* internal_default_instance() {
    return reinterpret_cast<const StateSpace*>(
               &_StateSpace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StateSpace& a, StateSpace& b) {
    a.Swap(&b);
  }
  inline void Swap(StateSpace* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StateSpace* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StateSpace* New() const final {
    return CreateMaybeMessage<StateSpace>(nullptr);
  }

  StateSpace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StateSpace>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StateSpace& from);
  void MergeFrom(const StateSpace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateSpace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ls.proto.systems.StateSpace";
  }
  protected:
  explicit StateSpace(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAFieldNumber = 1,
    kBFieldNumber = 2,
    kCFieldNumber = 3,
    kDFieldNumber = 4,
    kDtFieldNumber = 6,
    kIsDiscreteFieldNumber = 5,
  };
  // optional .ls.proto.eigen.MatrixXd A = 1;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  const ::ls::proto::eigen::MatrixXd& a() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::ls::proto::eigen::MatrixXd* release_a();
  ::ls::proto::eigen::MatrixXd* mutable_a();
  void set_allocated_a(::ls::proto::eigen::MatrixXd* a);
  private:
  const ::ls::proto::eigen::MatrixXd& _internal_a() const;
  ::ls::proto::eigen::MatrixXd* _internal_mutable_a();
  public:
  void unsafe_arena_set_allocated_a(
      ::ls::proto::eigen::MatrixXd* a);
  ::ls::proto::eigen::MatrixXd* unsafe_arena_release_a();

  // optional .ls.proto.eigen.MatrixXd B = 2;
  bool has_b() const;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  const ::ls::proto::eigen::MatrixXd& b() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::ls::proto::eigen::MatrixXd* release_b();
  ::ls::proto::eigen::MatrixXd* mutable_b();
  void set_allocated_b(::ls::proto::eigen::MatrixXd* b);
  private:
  const ::ls::proto::eigen::MatrixXd& _internal_b() const;
  ::ls::proto::eigen::MatrixXd* _internal_mutable_b();
  public:
  void unsafe_arena_set_allocated_b(
      ::ls::proto::eigen::MatrixXd* b);
  ::ls::proto::eigen::MatrixXd* unsafe_arena_release_b();

  // optional .ls.proto.eigen.MatrixXd C = 3;
  bool has_c() const;
  private:
  bool _internal_has_c() const;
  public:
  void clear_c();
  const ::ls::proto::eigen::MatrixXd& c() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::ls::proto::eigen::MatrixXd* release_c();
  ::ls::proto::eigen::MatrixXd* mutable_c();
  void set_allocated_c(::ls::proto::eigen::MatrixXd* c);
  private:
  const ::ls::proto::eigen::MatrixXd& _internal_c() const;
  ::ls::proto::eigen::MatrixXd* _internal_mutable_c();
  public:
  void unsafe_arena_set_allocated_c(
      ::ls::proto::eigen::MatrixXd* c);
  ::ls::proto::eigen::MatrixXd* unsafe_arena_release_c();

  // optional .ls.proto.eigen.MatrixXd D = 4;
  bool has_d() const;
  private:
  bool _internal_has_d() const;
  public:
  void clear_d();
  const ::ls::proto::eigen::MatrixXd& d() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::ls::proto::eigen::MatrixXd* release_d();
  ::ls::proto::eigen::MatrixXd* mutable_d();
  void set_allocated_d(::ls::proto::eigen::MatrixXd* d);
  private:
  const ::ls::proto::eigen::MatrixXd& _internal_d() const;
  ::ls::proto::eigen::MatrixXd* _internal_mutable_d();
  public:
  void unsafe_arena_set_allocated_d(
      ::ls::proto::eigen::MatrixXd* d);
  ::ls::proto::eigen::MatrixXd* unsafe_arena_release_d();

  // optional double dt = 6;
  bool has_dt() const;
  private:
  bool _internal_has_dt() const;
  public:
  void clear_dt();
  double dt() const;
  void set_dt(double value);
  private:
  double _internal_dt() const;
  void _internal_set_dt(double value);
  public:

  // optional bool isDiscrete = 5;
  bool has_isdiscrete() const;
  private:
  bool _internal_has_isdiscrete() const;
  public:
  void clear_isdiscrete();
  bool isdiscrete() const;
  void set_isdiscrete(bool value);
  private:
  bool _internal_isdiscrete() const;
  void _internal_set_isdiscrete(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ls.proto.systems.StateSpace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ls::proto::eigen::MatrixXd* a_;
  ::ls::proto::eigen::MatrixXd* b_;
  ::ls::proto::eigen::MatrixXd* c_;
  ::ls::proto::eigen::MatrixXd* d_;
  double dt_;
  bool isdiscrete_;
  friend struct ::TableStruct_ls_2eproto_2esystems_2eproto;
};
// -------------------------------------------------------------------

class TransferFunction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ls.proto.systems.TransferFunction) */ {
 public:
  inline TransferFunction() : TransferFunction(nullptr) {}
  ~TransferFunction() override;
  explicit constexpr TransferFunction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransferFunction(const TransferFunction& from);
  TransferFunction(TransferFunction&& from) noexcept
    : TransferFunction() {
    *this = ::std::move(from);
  }

  inline TransferFunction& operator=(const TransferFunction& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferFunction& operator=(TransferFunction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransferFunction& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransferFunction* internal_default_instance() {
    return reinterpret_cast<const TransferFunction*>(
               &_TransferFunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TransferFunction& a, TransferFunction& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferFunction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferFunction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransferFunction* New() const final {
    return CreateMaybeMessage<TransferFunction>(nullptr);
  }

  TransferFunction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferFunction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransferFunction& from);
  void MergeFrom(const TransferFunction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferFunction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ls.proto.systems.TransferFunction";
  }
  protected:
  explicit TransferFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumFieldNumber = 1,
    kDenFieldNumber = 2,
  };
  // optional .ls.proto.eigen.VectorXd num = 1;
  bool has_num() const;
  private:
  bool _internal_has_num() const;
  public:
  void clear_num();
  const ::ls::proto::eigen::VectorXd& num() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::ls::proto::eigen::VectorXd* release_num();
  ::ls::proto::eigen::VectorXd* mutable_num();
  void set_allocated_num(::ls::proto::eigen::VectorXd* num);
  private:
  const ::ls::proto::eigen::VectorXd& _internal_num() const;
  ::ls::proto::eigen::VectorXd* _internal_mutable_num();
  public:
  void unsafe_arena_set_allocated_num(
      ::ls::proto::eigen::VectorXd* num);
  ::ls::proto::eigen::VectorXd* unsafe_arena_release_num();

  // optional .ls.proto.eigen.VectorXd den = 2;
  bool has_den() const;
  private:
  bool _internal_has_den() const;
  public:
  void clear_den();
  const ::ls::proto::eigen::VectorXd& den() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::ls::proto::eigen::VectorXd* release_den();
  ::ls::proto::eigen::VectorXd* mutable_den();
  void set_allocated_den(::ls::proto::eigen::VectorXd* den);
  private:
  const ::ls::proto::eigen::VectorXd& _internal_den() const;
  ::ls::proto::eigen::VectorXd* _internal_mutable_den();
  public:
  void unsafe_arena_set_allocated_den(
      ::ls::proto::eigen::VectorXd* den);
  ::ls::proto::eigen::VectorXd* unsafe_arena_release_den();

  // @@protoc_insertion_point(class_scope:ls.proto.systems.TransferFunction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ls::proto::eigen::VectorXd* num_;
  ::ls::proto::eigen::VectorXd* den_;
  friend struct ::TableStruct_ls_2eproto_2esystems_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StateSpace

// optional .ls.proto.eigen.MatrixXd A = 1;
inline bool StateSpace::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || a_ != nullptr);
  return value;
}
inline bool StateSpace::has_a() const {
  return _internal_has_a();
}
inline const ::ls::proto::eigen::MatrixXd& StateSpace::_internal_a() const {
  const ::ls::proto::eigen::MatrixXd* p = a_;
  return p != nullptr ? *p : reinterpret_cast<const ::ls::proto::eigen::MatrixXd&>(
      ::ls::proto::eigen::_MatrixXd_default_instance_);
}
inline const ::ls::proto::eigen::MatrixXd& StateSpace::a() const {
  // @@protoc_insertion_point(field_get:ls.proto.systems.StateSpace.A)
  return _internal_a();
}
inline void StateSpace::unsafe_arena_set_allocated_a(
    ::ls::proto::eigen::MatrixXd* a) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(a_);
  }
  a_ = a;
  if (a) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ls.proto.systems.StateSpace.A)
}
inline ::ls::proto::eigen::MatrixXd* StateSpace::release_a() {
  _has_bits_[0] &= ~0x00000001u;
  ::ls::proto::eigen::MatrixXd* temp = a_;
  a_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ls::proto::eigen::MatrixXd* StateSpace::unsafe_arena_release_a() {
  // @@protoc_insertion_point(field_release:ls.proto.systems.StateSpace.A)
  _has_bits_[0] &= ~0x00000001u;
  ::ls::proto::eigen::MatrixXd* temp = a_;
  a_ = nullptr;
  return temp;
}
inline ::ls::proto::eigen::MatrixXd* StateSpace::_internal_mutable_a() {
  _has_bits_[0] |= 0x00000001u;
  if (a_ == nullptr) {
    auto* p = CreateMaybeMessage<::ls::proto::eigen::MatrixXd>(GetArena());
    a_ = p;
  }
  return a_;
}
inline ::ls::proto::eigen::MatrixXd* StateSpace::mutable_a() {
  // @@protoc_insertion_point(field_mutable:ls.proto.systems.StateSpace.A)
  return _internal_mutable_a();
}
inline void StateSpace::set_allocated_a(::ls::proto::eigen::MatrixXd* a) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(a_);
  }
  if (a) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(a)->GetArena();
    if (message_arena != submessage_arena) {
      a = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, a, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  a_ = a;
  // @@protoc_insertion_point(field_set_allocated:ls.proto.systems.StateSpace.A)
}

// optional .ls.proto.eigen.MatrixXd B = 2;
inline bool StateSpace::_internal_has_b() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || b_ != nullptr);
  return value;
}
inline bool StateSpace::has_b() const {
  return _internal_has_b();
}
inline const ::ls::proto::eigen::MatrixXd& StateSpace::_internal_b() const {
  const ::ls::proto::eigen::MatrixXd* p = b_;
  return p != nullptr ? *p : reinterpret_cast<const ::ls::proto::eigen::MatrixXd&>(
      ::ls::proto::eigen::_MatrixXd_default_instance_);
}
inline const ::ls::proto::eigen::MatrixXd& StateSpace::b() const {
  // @@protoc_insertion_point(field_get:ls.proto.systems.StateSpace.B)
  return _internal_b();
}
inline void StateSpace::unsafe_arena_set_allocated_b(
    ::ls::proto::eigen::MatrixXd* b) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(b_);
  }
  b_ = b;
  if (b) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ls.proto.systems.StateSpace.B)
}
inline ::ls::proto::eigen::MatrixXd* StateSpace::release_b() {
  _has_bits_[0] &= ~0x00000002u;
  ::ls::proto::eigen::MatrixXd* temp = b_;
  b_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ls::proto::eigen::MatrixXd* StateSpace::unsafe_arena_release_b() {
  // @@protoc_insertion_point(field_release:ls.proto.systems.StateSpace.B)
  _has_bits_[0] &= ~0x00000002u;
  ::ls::proto::eigen::MatrixXd* temp = b_;
  b_ = nullptr;
  return temp;
}
inline ::ls::proto::eigen::MatrixXd* StateSpace::_internal_mutable_b() {
  _has_bits_[0] |= 0x00000002u;
  if (b_ == nullptr) {
    auto* p = CreateMaybeMessage<::ls::proto::eigen::MatrixXd>(GetArena());
    b_ = p;
  }
  return b_;
}
inline ::ls::proto::eigen::MatrixXd* StateSpace::mutable_b() {
  // @@protoc_insertion_point(field_mutable:ls.proto.systems.StateSpace.B)
  return _internal_mutable_b();
}
inline void StateSpace::set_allocated_b(::ls::proto::eigen::MatrixXd* b) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(b_);
  }
  if (b) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(b)->GetArena();
    if (message_arena != submessage_arena) {
      b = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, b, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  b_ = b;
  // @@protoc_insertion_point(field_set_allocated:ls.proto.systems.StateSpace.B)
}

// optional .ls.proto.eigen.MatrixXd C = 3;
inline bool StateSpace::_internal_has_c() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || c_ != nullptr);
  return value;
}
inline bool StateSpace::has_c() const {
  return _internal_has_c();
}
inline const ::ls::proto::eigen::MatrixXd& StateSpace::_internal_c() const {
  const ::ls::proto::eigen::MatrixXd* p = c_;
  return p != nullptr ? *p : reinterpret_cast<const ::ls::proto::eigen::MatrixXd&>(
      ::ls::proto::eigen::_MatrixXd_default_instance_);
}
inline const ::ls::proto::eigen::MatrixXd& StateSpace::c() const {
  // @@protoc_insertion_point(field_get:ls.proto.systems.StateSpace.C)
  return _internal_c();
}
inline void StateSpace::unsafe_arena_set_allocated_c(
    ::ls::proto::eigen::MatrixXd* c) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(c_);
  }
  c_ = c;
  if (c) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ls.proto.systems.StateSpace.C)
}
inline ::ls::proto::eigen::MatrixXd* StateSpace::release_c() {
  _has_bits_[0] &= ~0x00000004u;
  ::ls::proto::eigen::MatrixXd* temp = c_;
  c_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ls::proto::eigen::MatrixXd* StateSpace::unsafe_arena_release_c() {
  // @@protoc_insertion_point(field_release:ls.proto.systems.StateSpace.C)
  _has_bits_[0] &= ~0x00000004u;
  ::ls::proto::eigen::MatrixXd* temp = c_;
  c_ = nullptr;
  return temp;
}
inline ::ls::proto::eigen::MatrixXd* StateSpace::_internal_mutable_c() {
  _has_bits_[0] |= 0x00000004u;
  if (c_ == nullptr) {
    auto* p = CreateMaybeMessage<::ls::proto::eigen::MatrixXd>(GetArena());
    c_ = p;
  }
  return c_;
}
inline ::ls::proto::eigen::MatrixXd* StateSpace::mutable_c() {
  // @@protoc_insertion_point(field_mutable:ls.proto.systems.StateSpace.C)
  return _internal_mutable_c();
}
inline void StateSpace::set_allocated_c(::ls::proto::eigen::MatrixXd* c) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(c_);
  }
  if (c) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(c)->GetArena();
    if (message_arena != submessage_arena) {
      c = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, c, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  c_ = c;
  // @@protoc_insertion_point(field_set_allocated:ls.proto.systems.StateSpace.C)
}

// optional .ls.proto.eigen.MatrixXd D = 4;
inline bool StateSpace::_internal_has_d() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || d_ != nullptr);
  return value;
}
inline bool StateSpace::has_d() const {
  return _internal_has_d();
}
inline const ::ls::proto::eigen::MatrixXd& StateSpace::_internal_d() const {
  const ::ls::proto::eigen::MatrixXd* p = d_;
  return p != nullptr ? *p : reinterpret_cast<const ::ls::proto::eigen::MatrixXd&>(
      ::ls::proto::eigen::_MatrixXd_default_instance_);
}
inline const ::ls::proto::eigen::MatrixXd& StateSpace::d() const {
  // @@protoc_insertion_point(field_get:ls.proto.systems.StateSpace.D)
  return _internal_d();
}
inline void StateSpace::unsafe_arena_set_allocated_d(
    ::ls::proto::eigen::MatrixXd* d) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(d_);
  }
  d_ = d;
  if (d) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ls.proto.systems.StateSpace.D)
}
inline ::ls::proto::eigen::MatrixXd* StateSpace::release_d() {
  _has_bits_[0] &= ~0x00000008u;
  ::ls::proto::eigen::MatrixXd* temp = d_;
  d_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ls::proto::eigen::MatrixXd* StateSpace::unsafe_arena_release_d() {
  // @@protoc_insertion_point(field_release:ls.proto.systems.StateSpace.D)
  _has_bits_[0] &= ~0x00000008u;
  ::ls::proto::eigen::MatrixXd* temp = d_;
  d_ = nullptr;
  return temp;
}
inline ::ls::proto::eigen::MatrixXd* StateSpace::_internal_mutable_d() {
  _has_bits_[0] |= 0x00000008u;
  if (d_ == nullptr) {
    auto* p = CreateMaybeMessage<::ls::proto::eigen::MatrixXd>(GetArena());
    d_ = p;
  }
  return d_;
}
inline ::ls::proto::eigen::MatrixXd* StateSpace::mutable_d() {
  // @@protoc_insertion_point(field_mutable:ls.proto.systems.StateSpace.D)
  return _internal_mutable_d();
}
inline void StateSpace::set_allocated_d(::ls::proto::eigen::MatrixXd* d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(d_);
  }
  if (d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(d)->GetArena();
    if (message_arena != submessage_arena) {
      d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, d, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  d_ = d;
  // @@protoc_insertion_point(field_set_allocated:ls.proto.systems.StateSpace.D)
}

// optional bool isDiscrete = 5;
inline bool StateSpace::_internal_has_isdiscrete() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool StateSpace::has_isdiscrete() const {
  return _internal_has_isdiscrete();
}
inline void StateSpace::clear_isdiscrete() {
  isdiscrete_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool StateSpace::_internal_isdiscrete() const {
  return isdiscrete_;
}
inline bool StateSpace::isdiscrete() const {
  // @@protoc_insertion_point(field_get:ls.proto.systems.StateSpace.isDiscrete)
  return _internal_isdiscrete();
}
inline void StateSpace::_internal_set_isdiscrete(bool value) {
  _has_bits_[0] |= 0x00000020u;
  isdiscrete_ = value;
}
inline void StateSpace::set_isdiscrete(bool value) {
  _internal_set_isdiscrete(value);
  // @@protoc_insertion_point(field_set:ls.proto.systems.StateSpace.isDiscrete)
}

// optional double dt = 6;
inline bool StateSpace::_internal_has_dt() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool StateSpace::has_dt() const {
  return _internal_has_dt();
}
inline void StateSpace::clear_dt() {
  dt_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double StateSpace::_internal_dt() const {
  return dt_;
}
inline double StateSpace::dt() const {
  // @@protoc_insertion_point(field_get:ls.proto.systems.StateSpace.dt)
  return _internal_dt();
}
inline void StateSpace::_internal_set_dt(double value) {
  _has_bits_[0] |= 0x00000010u;
  dt_ = value;
}
inline void StateSpace::set_dt(double value) {
  _internal_set_dt(value);
  // @@protoc_insertion_point(field_set:ls.proto.systems.StateSpace.dt)
}

// -------------------------------------------------------------------

// TransferFunction

// optional .ls.proto.eigen.VectorXd num = 1;
inline bool TransferFunction::_internal_has_num() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || num_ != nullptr);
  return value;
}
inline bool TransferFunction::has_num() const {
  return _internal_has_num();
}
inline const ::ls::proto::eigen::VectorXd& TransferFunction::_internal_num() const {
  const ::ls::proto::eigen::VectorXd* p = num_;
  return p != nullptr ? *p : reinterpret_cast<const ::ls::proto::eigen::VectorXd&>(
      ::ls::proto::eigen::_VectorXd_default_instance_);
}
inline const ::ls::proto::eigen::VectorXd& TransferFunction::num() const {
  // @@protoc_insertion_point(field_get:ls.proto.systems.TransferFunction.num)
  return _internal_num();
}
inline void TransferFunction::unsafe_arena_set_allocated_num(
    ::ls::proto::eigen::VectorXd* num) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(num_);
  }
  num_ = num;
  if (num) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ls.proto.systems.TransferFunction.num)
}
inline ::ls::proto::eigen::VectorXd* TransferFunction::release_num() {
  _has_bits_[0] &= ~0x00000001u;
  ::ls::proto::eigen::VectorXd* temp = num_;
  num_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ls::proto::eigen::VectorXd* TransferFunction::unsafe_arena_release_num() {
  // @@protoc_insertion_point(field_release:ls.proto.systems.TransferFunction.num)
  _has_bits_[0] &= ~0x00000001u;
  ::ls::proto::eigen::VectorXd* temp = num_;
  num_ = nullptr;
  return temp;
}
inline ::ls::proto::eigen::VectorXd* TransferFunction::_internal_mutable_num() {
  _has_bits_[0] |= 0x00000001u;
  if (num_ == nullptr) {
    auto* p = CreateMaybeMessage<::ls::proto::eigen::VectorXd>(GetArena());
    num_ = p;
  }
  return num_;
}
inline ::ls::proto::eigen::VectorXd* TransferFunction::mutable_num() {
  // @@protoc_insertion_point(field_mutable:ls.proto.systems.TransferFunction.num)
  return _internal_mutable_num();
}
inline void TransferFunction::set_allocated_num(::ls::proto::eigen::VectorXd* num) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(num_);
  }
  if (num) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(num)->GetArena();
    if (message_arena != submessage_arena) {
      num = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, num, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  num_ = num;
  // @@protoc_insertion_point(field_set_allocated:ls.proto.systems.TransferFunction.num)
}

// optional .ls.proto.eigen.VectorXd den = 2;
inline bool TransferFunction::_internal_has_den() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || den_ != nullptr);
  return value;
}
inline bool TransferFunction::has_den() const {
  return _internal_has_den();
}
inline const ::ls::proto::eigen::VectorXd& TransferFunction::_internal_den() const {
  const ::ls::proto::eigen::VectorXd* p = den_;
  return p != nullptr ? *p : reinterpret_cast<const ::ls::proto::eigen::VectorXd&>(
      ::ls::proto::eigen::_VectorXd_default_instance_);
}
inline const ::ls::proto::eigen::VectorXd& TransferFunction::den() const {
  // @@protoc_insertion_point(field_get:ls.proto.systems.TransferFunction.den)
  return _internal_den();
}
inline void TransferFunction::unsafe_arena_set_allocated_den(
    ::ls::proto::eigen::VectorXd* den) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(den_);
  }
  den_ = den;
  if (den) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ls.proto.systems.TransferFunction.den)
}
inline ::ls::proto::eigen::VectorXd* TransferFunction::release_den() {
  _has_bits_[0] &= ~0x00000002u;
  ::ls::proto::eigen::VectorXd* temp = den_;
  den_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ls::proto::eigen::VectorXd* TransferFunction::unsafe_arena_release_den() {
  // @@protoc_insertion_point(field_release:ls.proto.systems.TransferFunction.den)
  _has_bits_[0] &= ~0x00000002u;
  ::ls::proto::eigen::VectorXd* temp = den_;
  den_ = nullptr;
  return temp;
}
inline ::ls::proto::eigen::VectorXd* TransferFunction::_internal_mutable_den() {
  _has_bits_[0] |= 0x00000002u;
  if (den_ == nullptr) {
    auto* p = CreateMaybeMessage<::ls::proto::eigen::VectorXd>(GetArena());
    den_ = p;
  }
  return den_;
}
inline ::ls::proto::eigen::VectorXd* TransferFunction::mutable_den() {
  // @@protoc_insertion_point(field_mutable:ls.proto.systems.TransferFunction.den)
  return _internal_mutable_den();
}
inline void TransferFunction::set_allocated_den(::ls::proto::eigen::VectorXd* den) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(den_);
  }
  if (den) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(den)->GetArena();
    if (message_arena != submessage_arena) {
      den = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, den, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  den_ = den;
  // @@protoc_insertion_point(field_set_allocated:ls.proto.systems.TransferFunction.den)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace systems
}  // namespace proto
}  // namespace ls

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ls_2eproto_2esystems_2eproto
