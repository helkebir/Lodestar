// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ls.proto.eigen.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ls_2eproto_2eeigen_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ls_2eproto_2eeigen_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ls_2eproto_2eeigen_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ls_2eproto_2eeigen_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ls_2eproto_2eeigen_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_ls_2eproto_2eeigen_2eproto_metadata_getter(int index);
namespace ls {
namespace proto {
namespace eigen {
class MatrixXd;
struct MatrixXdDefaultTypeInternal;
extern MatrixXdDefaultTypeInternal _MatrixXd_default_instance_;
class VectorXd;
struct VectorXdDefaultTypeInternal;
extern VectorXdDefaultTypeInternal _VectorXd_default_instance_;
}  // namespace eigen
}  // namespace proto
}  // namespace ls
PROTOBUF_NAMESPACE_OPEN
template<> ::ls::proto::eigen::MatrixXd* Arena::CreateMaybeMessage<::ls::proto::eigen::MatrixXd>(Arena*);
template<> ::ls::proto::eigen::VectorXd* Arena::CreateMaybeMessage<::ls::proto::eigen::VectorXd>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ls {
namespace proto {
namespace eigen {

// ===================================================================

class VectorXd PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ls.proto.eigen.VectorXd) */ {
 public:
  inline VectorXd() : VectorXd(nullptr) {}
  virtual ~VectorXd();
  explicit constexpr VectorXd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorXd(const VectorXd& from);
  VectorXd(VectorXd&& from) noexcept
    : VectorXd() {
    *this = ::std::move(from);
  }

  inline VectorXd& operator=(const VectorXd& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorXd& operator=(VectorXd&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VectorXd& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorXd* internal_default_instance() {
    return reinterpret_cast<const VectorXd*>(
               &_VectorXd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VectorXd& a, VectorXd& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorXd* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorXd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VectorXd* New() const final {
    return CreateMaybeMessage<VectorXd>(nullptr);
  }

  VectorXd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VectorXd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VectorXd& from);
  void MergeFrom(const VectorXd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorXd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ls.proto.eigen.VectorXd";
  }
  protected:
  explicit VectorXd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_ls_2eproto_2eeigen_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoeffFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // repeated double coeff = 1;
  int coeff_size() const;
  private:
  int _internal_coeff_size() const;
  public:
  void clear_coeff();
  private:
  double _internal_coeff(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_coeff() const;
  void _internal_add_coeff(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_coeff();
  public:
  double coeff(int index) const;
  void set_coeff(int index, double value);
  void add_coeff(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      coeff() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_coeff();

  // int32 size = 2;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ls.proto.eigen.VectorXd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > coeff_;
  mutable std::atomic<int> _coeff_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  friend struct ::TableStruct_ls_2eproto_2eeigen_2eproto;
};
// -------------------------------------------------------------------

class MatrixXd PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ls.proto.eigen.MatrixXd) */ {
 public:
  inline MatrixXd() : MatrixXd(nullptr) {}
  virtual ~MatrixXd();
  explicit constexpr MatrixXd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MatrixXd(const MatrixXd& from);
  MatrixXd(MatrixXd&& from) noexcept
    : MatrixXd() {
    *this = ::std::move(from);
  }

  inline MatrixXd& operator=(const MatrixXd& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatrixXd& operator=(MatrixXd&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MatrixXd& default_instance() {
    return *internal_default_instance();
  }
  static inline const MatrixXd* internal_default_instance() {
    return reinterpret_cast<const MatrixXd*>(
               &_MatrixXd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MatrixXd& a, MatrixXd& b) {
    a.Swap(&b);
  }
  inline void Swap(MatrixXd* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatrixXd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MatrixXd* New() const final {
    return CreateMaybeMessage<MatrixXd>(nullptr);
  }

  MatrixXd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MatrixXd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MatrixXd& from);
  void MergeFrom(const MatrixXd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatrixXd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ls.proto.eigen.MatrixXd";
  }
  protected:
  explicit MatrixXd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_ls_2eproto_2eeigen_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowFieldNumber = 1,
    kRowsFieldNumber = 2,
    kColsFieldNumber = 3,
  };
  // repeated .ls.proto.eigen.VectorXd row = 1;
  int row_size() const;
  private:
  int _internal_row_size() const;
  public:
  void clear_row();
  ::ls::proto::eigen::VectorXd* mutable_row(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ls::proto::eigen::VectorXd >*
      mutable_row();
  private:
  const ::ls::proto::eigen::VectorXd& _internal_row(int index) const;
  ::ls::proto::eigen::VectorXd* _internal_add_row();
  public:
  const ::ls::proto::eigen::VectorXd& row(int index) const;
  ::ls::proto::eigen::VectorXd* add_row();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ls::proto::eigen::VectorXd >&
      row() const;

  // int32 rows = 2;
  bool has_rows() const;
  private:
  bool _internal_has_rows() const;
  public:
  void clear_rows();
  ::PROTOBUF_NAMESPACE_ID::int32 rows() const;
  void set_rows(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rows() const;
  void _internal_set_rows(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cols = 3;
  bool has_cols() const;
  private:
  bool _internal_has_cols() const;
  public:
  void clear_cols();
  ::PROTOBUF_NAMESPACE_ID::int32 cols() const;
  void set_cols(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cols() const;
  void _internal_set_cols(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ls.proto.eigen.MatrixXd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ls::proto::eigen::VectorXd > row_;
  ::PROTOBUF_NAMESPACE_ID::int32 rows_;
  ::PROTOBUF_NAMESPACE_ID::int32 cols_;
  friend struct ::TableStruct_ls_2eproto_2eeigen_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VectorXd

// repeated double coeff = 1;
inline int VectorXd::_internal_coeff_size() const {
  return coeff_.size();
}
inline int VectorXd::coeff_size() const {
  return _internal_coeff_size();
}
inline void VectorXd::clear_coeff() {
  coeff_.Clear();
}
inline double VectorXd::_internal_coeff(int index) const {
  return coeff_.Get(index);
}
inline double VectorXd::coeff(int index) const {
  // @@protoc_insertion_point(field_get:ls.proto.eigen.VectorXd.coeff)
  return _internal_coeff(index);
}
inline void VectorXd::set_coeff(int index, double value) {
  coeff_.Set(index, value);
  // @@protoc_insertion_point(field_set:ls.proto.eigen.VectorXd.coeff)
}
inline void VectorXd::_internal_add_coeff(double value) {
  coeff_.Add(value);
}
inline void VectorXd::add_coeff(double value) {
  _internal_add_coeff(value);
  // @@protoc_insertion_point(field_add:ls.proto.eigen.VectorXd.coeff)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VectorXd::_internal_coeff() const {
  return coeff_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VectorXd::coeff() const {
  // @@protoc_insertion_point(field_list:ls.proto.eigen.VectorXd.coeff)
  return _internal_coeff();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VectorXd::_internal_mutable_coeff() {
  return &coeff_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VectorXd::mutable_coeff() {
  // @@protoc_insertion_point(field_mutable_list:ls.proto.eigen.VectorXd.coeff)
  return _internal_mutable_coeff();
}

// int32 size = 2;
inline bool VectorXd::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VectorXd::has_size() const {
  return _internal_has_size();
}
inline void VectorXd::clear_size() {
  size_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorXd::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorXd::size() const {
  // @@protoc_insertion_point(field_get:ls.proto.eigen.VectorXd.size)
  return _internal_size();
}
inline void VectorXd::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  size_ = value;
}
inline void VectorXd::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:ls.proto.eigen.VectorXd.size)
}

// -------------------------------------------------------------------

// MatrixXd

// repeated .ls.proto.eigen.VectorXd row = 1;
inline int MatrixXd::_internal_row_size() const {
  return row_.size();
}
inline int MatrixXd::row_size() const {
  return _internal_row_size();
}
inline void MatrixXd::clear_row() {
  row_.Clear();
}
inline ::ls::proto::eigen::VectorXd* MatrixXd::mutable_row(int index) {
  // @@protoc_insertion_point(field_mutable:ls.proto.eigen.MatrixXd.row)
  return row_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ls::proto::eigen::VectorXd >*
MatrixXd::mutable_row() {
  // @@protoc_insertion_point(field_mutable_list:ls.proto.eigen.MatrixXd.row)
  return &row_;
}
inline const ::ls::proto::eigen::VectorXd& MatrixXd::_internal_row(int index) const {
  return row_.Get(index);
}
inline const ::ls::proto::eigen::VectorXd& MatrixXd::row(int index) const {
  // @@protoc_insertion_point(field_get:ls.proto.eigen.MatrixXd.row)
  return _internal_row(index);
}
inline ::ls::proto::eigen::VectorXd* MatrixXd::_internal_add_row() {
  return row_.Add();
}
inline ::ls::proto::eigen::VectorXd* MatrixXd::add_row() {
  // @@protoc_insertion_point(field_add:ls.proto.eigen.MatrixXd.row)
  return _internal_add_row();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ls::proto::eigen::VectorXd >&
MatrixXd::row() const {
  // @@protoc_insertion_point(field_list:ls.proto.eigen.MatrixXd.row)
  return row_;
}

// int32 rows = 2;
inline bool MatrixXd::_internal_has_rows() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MatrixXd::has_rows() const {
  return _internal_has_rows();
}
inline void MatrixXd::clear_rows() {
  rows_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatrixXd::_internal_rows() const {
  return rows_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatrixXd::rows() const {
  // @@protoc_insertion_point(field_get:ls.proto.eigen.MatrixXd.rows)
  return _internal_rows();
}
inline void MatrixXd::_internal_set_rows(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  rows_ = value;
}
inline void MatrixXd::set_rows(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rows(value);
  // @@protoc_insertion_point(field_set:ls.proto.eigen.MatrixXd.rows)
}

// int32 cols = 3;
inline bool MatrixXd::_internal_has_cols() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MatrixXd::has_cols() const {
  return _internal_has_cols();
}
inline void MatrixXd::clear_cols() {
  cols_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatrixXd::_internal_cols() const {
  return cols_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatrixXd::cols() const {
  // @@protoc_insertion_point(field_get:ls.proto.eigen.MatrixXd.cols)
  return _internal_cols();
}
inline void MatrixXd::_internal_set_cols(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  cols_ = value;
}
inline void MatrixXd::set_cols(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cols(value);
  // @@protoc_insertion_point(field_set:ls.proto.eigen.MatrixXd.cols)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace eigen
}  // namespace proto
}  // namespace ls

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ls_2eproto_2eeigen_2eproto
