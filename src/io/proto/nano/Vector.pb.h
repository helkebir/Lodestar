/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.5 */

#ifndef PB_NPB_VECTOR_PB_H_INCLUDED
#define PB_NPB_VECTOR_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _npb_Vector12d { 
    double coeff[12]; 
    bool has_size;
    int32_t size; 
} npb_Vector12d;

typedef struct _npb_Vector12f { 
    float coeff[12]; 
    bool has_size;
    int32_t size; 
} npb_Vector12f;

typedef struct _npb_Vector16d { 
    double coeff[16]; 
    bool has_size;
    int32_t size; 
} npb_Vector16d;

typedef struct _npb_Vector16f { 
    float coeff[16]; 
    bool has_size;
    int32_t size; 
} npb_Vector16f;

typedef struct _npb_Vector2d { 
    double coeff[2]; 
    bool has_size;
    int32_t size; 
} npb_Vector2d;

typedef struct _npb_Vector2f { 
    float coeff[2]; 
    bool has_size;
    int32_t size; 
} npb_Vector2f;

typedef struct _npb_Vector32d { 
    double coeff[32]; 
    bool has_size;
    int32_t size; 
} npb_Vector32d;

typedef struct _npb_Vector32f { 
    float coeff[32]; 
    bool has_size;
    int32_t size; 
} npb_Vector32f;

typedef struct _npb_Vector3d { 
    double coeff[3]; 
    bool has_size;
    int32_t size; 
} npb_Vector3d;

typedef struct _npb_Vector3f { 
    float coeff[3]; 
    bool has_size;
    int32_t size; 
} npb_Vector3f;

typedef struct _npb_Vector4d { 
    double coeff[4]; 
    bool has_size;
    int32_t size; 
} npb_Vector4d;

typedef struct _npb_Vector4f { 
    float coeff[4]; 
    bool has_size;
    int32_t size; 
} npb_Vector4f;

typedef struct _npb_Vector64d { 
    double coeff[64]; 
    bool has_size;
    int32_t size; 
} npb_Vector64d;

typedef struct _npb_Vector64f { 
    float coeff[64]; 
    bool has_size;
    int32_t size; 
} npb_Vector64f;

typedef struct _npb_Vector6d { 
    double coeff[6]; 
    bool has_size;
    int32_t size; 
} npb_Vector6d;

typedef struct _npb_Vector6f { 
    float coeff[6]; 
    bool has_size;
    int32_t size; 
} npb_Vector6f;

typedef struct _npb_Vector8d { 
    double coeff[8]; 
    bool has_size;
    int32_t size; 
} npb_Vector8d;

typedef struct _npb_Vector8f { 
    float coeff[8]; 
    bool has_size;
    int32_t size; 
} npb_Vector8f;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define npb_Vector2d_init_default                {{0, 0}, false, 2}
#define npb_Vector2f_init_default                {{0, 0}, false, 2}
#define npb_Vector3d_init_default                {{0, 0, 0}, false, 3}
#define npb_Vector3f_init_default                {{0, 0, 0}, false, 3}
#define npb_Vector4d_init_default                {{0, 0, 0, 0}, false, 3}
#define npb_Vector4f_init_default                {{0, 0, 0, 0}, false, 3}
#define npb_Vector6d_init_default                {{0, 0, 0, 0, 0, 0}, false, 6}
#define npb_Vector6f_init_default                {{0, 0, 0, 0, 0, 0}, false, 6}
#define npb_Vector8d_init_default                {{0, 0, 0, 0, 0, 0, 0, 0}, false, 8}
#define npb_Vector8f_init_default                {{0, 0, 0, 0, 0, 0, 0, 0}, false, 8}
#define npb_Vector12d_init_default               {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, false, 12}
#define npb_Vector12f_init_default               {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, false, 12}
#define npb_Vector16d_init_default               {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, false, 16}
#define npb_Vector16f_init_default               {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, false, 16}
#define npb_Vector32d_init_default               {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, false, 32}
#define npb_Vector32f_init_default               {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, false, 32}
#define npb_Vector64d_init_default               {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, false, 64}
#define npb_Vector64f_init_default               {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, false, 64}
#define npb_Vector2d_init_zero                   {{0, 0}, false, 0}
#define npb_Vector2f_init_zero                   {{0, 0}, false, 0}
#define npb_Vector3d_init_zero                   {{0, 0, 0}, false, 0}
#define npb_Vector3f_init_zero                   {{0, 0, 0}, false, 0}
#define npb_Vector4d_init_zero                   {{0, 0, 0, 0}, false, 0}
#define npb_Vector4f_init_zero                   {{0, 0, 0, 0}, false, 0}
#define npb_Vector6d_init_zero                   {{0, 0, 0, 0, 0, 0}, false, 0}
#define npb_Vector6f_init_zero                   {{0, 0, 0, 0, 0, 0}, false, 0}
#define npb_Vector8d_init_zero                   {{0, 0, 0, 0, 0, 0, 0, 0}, false, 0}
#define npb_Vector8f_init_zero                   {{0, 0, 0, 0, 0, 0, 0, 0}, false, 0}
#define npb_Vector12d_init_zero                  {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, false, 0}
#define npb_Vector12f_init_zero                  {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, false, 0}
#define npb_Vector16d_init_zero                  {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, false, 0}
#define npb_Vector16f_init_zero                  {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, false, 0}
#define npb_Vector32d_init_zero                  {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, false, 0}
#define npb_Vector32f_init_zero                  {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, false, 0}
#define npb_Vector64d_init_zero                  {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, false, 0}
#define npb_Vector64f_init_zero                  {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, false, 0}

/* Field tags (for use in manual encoding/decoding) */
#define npb_Vector12d_coeff_tag                  1
#define npb_Vector12d_size_tag                   2
#define npb_Vector12f_coeff_tag                  1
#define npb_Vector12f_size_tag                   2
#define npb_Vector16d_coeff_tag                  1
#define npb_Vector16d_size_tag                   2
#define npb_Vector16f_coeff_tag                  1
#define npb_Vector16f_size_tag                   2
#define npb_Vector2d_coeff_tag                   1
#define npb_Vector2d_size_tag                    2
#define npb_Vector2f_coeff_tag                   1
#define npb_Vector2f_size_tag                    2
#define npb_Vector32d_coeff_tag                  1
#define npb_Vector32d_size_tag                   2
#define npb_Vector32f_coeff_tag                  1
#define npb_Vector32f_size_tag                   2
#define npb_Vector3d_coeff_tag                   1
#define npb_Vector3d_size_tag                    2
#define npb_Vector3f_coeff_tag                   1
#define npb_Vector3f_size_tag                    2
#define npb_Vector4d_coeff_tag                   1
#define npb_Vector4d_size_tag                    2
#define npb_Vector4f_coeff_tag                   1
#define npb_Vector4f_size_tag                    2
#define npb_Vector64d_coeff_tag                  1
#define npb_Vector64d_size_tag                   2
#define npb_Vector64f_coeff_tag                  1
#define npb_Vector64f_size_tag                   2
#define npb_Vector6d_coeff_tag                   1
#define npb_Vector6d_size_tag                    2
#define npb_Vector6f_coeff_tag                   1
#define npb_Vector6f_size_tag                    2
#define npb_Vector8d_coeff_tag                   1
#define npb_Vector8d_size_tag                    2
#define npb_Vector8f_coeff_tag                   1
#define npb_Vector8f_size_tag                    2

/* Struct field encoding specification for nanopb */
#define npb_Vector2d_FIELDLIST(X, a) \
X(a, STATIC,   FIXARRAY, DOUBLE,   coeff,             1) \
X(a, STATIC,   OPTIONAL, INT32,    size,              2)
#define npb_Vector2d_CALLBACK NULL
#define npb_Vector2d_DEFAULT (const pb_byte_t*)"\x10\x02\x00"

#define npb_Vector2f_FIELDLIST(X, a) \
X(a, STATIC,   FIXARRAY, FLOAT,    coeff,             1) \
X(a, STATIC,   OPTIONAL, INT32,    size,              2)
#define npb_Vector2f_CALLBACK NULL
#define npb_Vector2f_DEFAULT (const pb_byte_t*)"\x10\x02\x00"

#define npb_Vector3d_FIELDLIST(X, a) \
X(a, STATIC,   FIXARRAY, DOUBLE,   coeff,             1) \
X(a, STATIC,   OPTIONAL, INT32,    size,              2)
#define npb_Vector3d_CALLBACK NULL
#define npb_Vector3d_DEFAULT (const pb_byte_t*)"\x10\x03\x00"

#define npb_Vector3f_FIELDLIST(X, a) \
X(a, STATIC,   FIXARRAY, FLOAT,    coeff,             1) \
X(a, STATIC,   OPTIONAL, INT32,    size,              2)
#define npb_Vector3f_CALLBACK NULL
#define npb_Vector3f_DEFAULT (const pb_byte_t*)"\x10\x03\x00"

#define npb_Vector4d_FIELDLIST(X, a) \
X(a, STATIC,   FIXARRAY, DOUBLE,   coeff,             1) \
X(a, STATIC,   OPTIONAL, INT32,    size,              2)
#define npb_Vector4d_CALLBACK NULL
#define npb_Vector4d_DEFAULT (const pb_byte_t*)"\x10\x03\x00"

#define npb_Vector4f_FIELDLIST(X, a) \
X(a, STATIC,   FIXARRAY, FLOAT,    coeff,             1) \
X(a, STATIC,   OPTIONAL, INT32,    size,              2)
#define npb_Vector4f_CALLBACK NULL
#define npb_Vector4f_DEFAULT (const pb_byte_t*)"\x10\x03\x00"

#define npb_Vector6d_FIELDLIST(X, a) \
X(a, STATIC,   FIXARRAY, DOUBLE,   coeff,             1) \
X(a, STATIC,   OPTIONAL, INT32,    size,              2)
#define npb_Vector6d_CALLBACK NULL
#define npb_Vector6d_DEFAULT (const pb_byte_t*)"\x10\x06\x00"

#define npb_Vector6f_FIELDLIST(X, a) \
X(a, STATIC,   FIXARRAY, FLOAT,    coeff,             1) \
X(a, STATIC,   OPTIONAL, INT32,    size,              2)
#define npb_Vector6f_CALLBACK NULL
#define npb_Vector6f_DEFAULT (const pb_byte_t*)"\x10\x06\x00"

#define npb_Vector8d_FIELDLIST(X, a) \
X(a, STATIC,   FIXARRAY, DOUBLE,   coeff,             1) \
X(a, STATIC,   OPTIONAL, INT32,    size,              2)
#define npb_Vector8d_CALLBACK NULL
#define npb_Vector8d_DEFAULT (const pb_byte_t*)"\x10\x08\x00"

#define npb_Vector8f_FIELDLIST(X, a) \
X(a, STATIC,   FIXARRAY, FLOAT,    coeff,             1) \
X(a, STATIC,   OPTIONAL, INT32,    size,              2)
#define npb_Vector8f_CALLBACK NULL
#define npb_Vector8f_DEFAULT (const pb_byte_t*)"\x10\x08\x00"

#define npb_Vector12d_FIELDLIST(X, a) \
X(a, STATIC,   FIXARRAY, DOUBLE,   coeff,             1) \
X(a, STATIC,   OPTIONAL, INT32,    size,              2)
#define npb_Vector12d_CALLBACK NULL
#define npb_Vector12d_DEFAULT (const pb_byte_t*)"\x10\x0c\x00"

#define npb_Vector12f_FIELDLIST(X, a) \
X(a, STATIC,   FIXARRAY, FLOAT,    coeff,             1) \
X(a, STATIC,   OPTIONAL, INT32,    size,              2)
#define npb_Vector12f_CALLBACK NULL
#define npb_Vector12f_DEFAULT (const pb_byte_t*)"\x10\x0c\x00"

#define npb_Vector16d_FIELDLIST(X, a) \
X(a, STATIC,   FIXARRAY, DOUBLE,   coeff,             1) \
X(a, STATIC,   OPTIONAL, INT32,    size,              2)
#define npb_Vector16d_CALLBACK NULL
#define npb_Vector16d_DEFAULT (const pb_byte_t*)"\x10\x10\x00"

#define npb_Vector16f_FIELDLIST(X, a) \
X(a, STATIC,   FIXARRAY, FLOAT,    coeff,             1) \
X(a, STATIC,   OPTIONAL, INT32,    size,              2)
#define npb_Vector16f_CALLBACK NULL
#define npb_Vector16f_DEFAULT (const pb_byte_t*)"\x10\x10\x00"

#define npb_Vector32d_FIELDLIST(X, a) \
X(a, STATIC,   FIXARRAY, DOUBLE,   coeff,             1) \
X(a, STATIC,   OPTIONAL, INT32,    size,              2)
#define npb_Vector32d_CALLBACK NULL
#define npb_Vector32d_DEFAULT (const pb_byte_t*)"\x10\x20\x00"

#define npb_Vector32f_FIELDLIST(X, a) \
X(a, STATIC,   FIXARRAY, FLOAT,    coeff,             1) \
X(a, STATIC,   OPTIONAL, INT32,    size,              2)
#define npb_Vector32f_CALLBACK NULL
#define npb_Vector32f_DEFAULT (const pb_byte_t*)"\x10\x20\x00"

#define npb_Vector64d_FIELDLIST(X, a) \
X(a, STATIC,   FIXARRAY, DOUBLE,   coeff,             1) \
X(a, STATIC,   OPTIONAL, INT32,    size,              2)
#define npb_Vector64d_CALLBACK NULL
#define npb_Vector64d_DEFAULT (const pb_byte_t*)"\x10\x40\x00"

#define npb_Vector64f_FIELDLIST(X, a) \
X(a, STATIC,   FIXARRAY, FLOAT,    coeff,             1) \
X(a, STATIC,   OPTIONAL, INT32,    size,              2)
#define npb_Vector64f_CALLBACK NULL
#define npb_Vector64f_DEFAULT (const pb_byte_t*)"\x10\x40\x00"

extern const pb_msgdesc_t npb_Vector2d_msg;
extern const pb_msgdesc_t npb_Vector2f_msg;
extern const pb_msgdesc_t npb_Vector3d_msg;
extern const pb_msgdesc_t npb_Vector3f_msg;
extern const pb_msgdesc_t npb_Vector4d_msg;
extern const pb_msgdesc_t npb_Vector4f_msg;
extern const pb_msgdesc_t npb_Vector6d_msg;
extern const pb_msgdesc_t npb_Vector6f_msg;
extern const pb_msgdesc_t npb_Vector8d_msg;
extern const pb_msgdesc_t npb_Vector8f_msg;
extern const pb_msgdesc_t npb_Vector12d_msg;
extern const pb_msgdesc_t npb_Vector12f_msg;
extern const pb_msgdesc_t npb_Vector16d_msg;
extern const pb_msgdesc_t npb_Vector16f_msg;
extern const pb_msgdesc_t npb_Vector32d_msg;
extern const pb_msgdesc_t npb_Vector32f_msg;
extern const pb_msgdesc_t npb_Vector64d_msg;
extern const pb_msgdesc_t npb_Vector64f_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define npb_Vector2d_fields &npb_Vector2d_msg
#define npb_Vector2f_fields &npb_Vector2f_msg
#define npb_Vector3d_fields &npb_Vector3d_msg
#define npb_Vector3f_fields &npb_Vector3f_msg
#define npb_Vector4d_fields &npb_Vector4d_msg
#define npb_Vector4f_fields &npb_Vector4f_msg
#define npb_Vector6d_fields &npb_Vector6d_msg
#define npb_Vector6f_fields &npb_Vector6f_msg
#define npb_Vector8d_fields &npb_Vector8d_msg
#define npb_Vector8f_fields &npb_Vector8f_msg
#define npb_Vector12d_fields &npb_Vector12d_msg
#define npb_Vector12f_fields &npb_Vector12f_msg
#define npb_Vector16d_fields &npb_Vector16d_msg
#define npb_Vector16f_fields &npb_Vector16f_msg
#define npb_Vector32d_fields &npb_Vector32d_msg
#define npb_Vector32f_fields &npb_Vector32f_msg
#define npb_Vector64d_fields &npb_Vector64d_msg
#define npb_Vector64f_fields &npb_Vector64f_msg

/* Maximum encoded size of messages (where known) */
#define npb_Vector12d_size                       119
#define npb_Vector12f_size                       71
#define npb_Vector16d_size                       155
#define npb_Vector16f_size                       91
#define npb_Vector2d_size                        29
#define npb_Vector2f_size                        21
#define npb_Vector32d_size                       299
#define npb_Vector32f_size                       171
#define npb_Vector3d_size                        38
#define npb_Vector3f_size                        26
#define npb_Vector4d_size                        47
#define npb_Vector4f_size                        31
#define npb_Vector64d_size                       587
#define npb_Vector64f_size                       331
#define npb_Vector6d_size                        65
#define npb_Vector6f_size                        41
#define npb_Vector8d_size                        83
#define npb_Vector8f_size                        51

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
