// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ls.proto.symbolic.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ls_2eproto_2esymbolic_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ls_2eproto_2esymbolic_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ls.proto.ginac.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ls_2eproto_2esymbolic_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ls_2eproto_2esymbolic_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ls_2eproto_2esymbolic_2eproto;
namespace ls {
namespace proto {
namespace symbolic {
class OrdinaryDifferentialEquation;
struct OrdinaryDifferentialEquationDefaultTypeInternal;
extern OrdinaryDifferentialEquationDefaultTypeInternal _OrdinaryDifferentialEquation_default_instance_;
}  // namespace symbolic
}  // namespace proto
}  // namespace ls
PROTOBUF_NAMESPACE_OPEN
template<> ::ls::proto::symbolic::OrdinaryDifferentialEquation* Arena::CreateMaybeMessage<::ls::proto::symbolic::OrdinaryDifferentialEquation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ls {
namespace proto {
namespace symbolic {

// ===================================================================

class OrdinaryDifferentialEquation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ls.proto.symbolic.OrdinaryDifferentialEquation) */ {
 public:
  inline OrdinaryDifferentialEquation() : OrdinaryDifferentialEquation(nullptr) {}
  ~OrdinaryDifferentialEquation() override;
  explicit constexpr OrdinaryDifferentialEquation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrdinaryDifferentialEquation(const OrdinaryDifferentialEquation& from);
  OrdinaryDifferentialEquation(OrdinaryDifferentialEquation&& from) noexcept
    : OrdinaryDifferentialEquation() {
    *this = ::std::move(from);
  }

  inline OrdinaryDifferentialEquation& operator=(const OrdinaryDifferentialEquation& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrdinaryDifferentialEquation& operator=(OrdinaryDifferentialEquation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrdinaryDifferentialEquation& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrdinaryDifferentialEquation* internal_default_instance() {
    return reinterpret_cast<const OrdinaryDifferentialEquation*>(
               &_OrdinaryDifferentialEquation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OrdinaryDifferentialEquation& a, OrdinaryDifferentialEquation& b) {
    a.Swap(&b);
  }
  inline void Swap(OrdinaryDifferentialEquation* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrdinaryDifferentialEquation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrdinaryDifferentialEquation* New() const final {
    return new OrdinaryDifferentialEquation();
  }

  OrdinaryDifferentialEquation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrdinaryDifferentialEquation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrdinaryDifferentialEquation& from);
  void MergeFrom(const OrdinaryDifferentialEquation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrdinaryDifferentialEquation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ls.proto.symbolic.OrdinaryDifferentialEquation";
  }
  protected:
  explicit OrdinaryDifferentialEquation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFunctionsFieldNumber = 1,
    kStatesFieldNumber = 2,
    kInputsFieldNumber = 3,
    kTimeFieldNumber = 4,
  };
  // optional .ls.proto.ginac.lst functions = 1;
  bool has_functions() const;
  private:
  bool _internal_has_functions() const;
  public:
  void clear_functions();
  const ::ls::proto::ginac::lst& functions() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::ls::proto::ginac::lst* release_functions();
  ::ls::proto::ginac::lst* mutable_functions();
  void set_allocated_functions(::ls::proto::ginac::lst* functions);
  private:
  const ::ls::proto::ginac::lst& _internal_functions() const;
  ::ls::proto::ginac::lst* _internal_mutable_functions();
  public:
  void unsafe_arena_set_allocated_functions(
      ::ls::proto::ginac::lst* functions);
  ::ls::proto::ginac::lst* unsafe_arena_release_functions();

  // optional .ls.proto.ginac.lst states = 2;
  bool has_states() const;
  private:
  bool _internal_has_states() const;
  public:
  void clear_states();
  const ::ls::proto::ginac::lst& states() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::ls::proto::ginac::lst* release_states();
  ::ls::proto::ginac::lst* mutable_states();
  void set_allocated_states(::ls::proto::ginac::lst* states);
  private:
  const ::ls::proto::ginac::lst& _internal_states() const;
  ::ls::proto::ginac::lst* _internal_mutable_states();
  public:
  void unsafe_arena_set_allocated_states(
      ::ls::proto::ginac::lst* states);
  ::ls::proto::ginac::lst* unsafe_arena_release_states();

  // optional .ls.proto.ginac.lst inputs = 3;
  bool has_inputs() const;
  private:
  bool _internal_has_inputs() const;
  public:
  void clear_inputs();
  const ::ls::proto::ginac::lst& inputs() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::ls::proto::ginac::lst* release_inputs();
  ::ls::proto::ginac::lst* mutable_inputs();
  void set_allocated_inputs(::ls::proto::ginac::lst* inputs);
  private:
  const ::ls::proto::ginac::lst& _internal_inputs() const;
  ::ls::proto::ginac::lst* _internal_mutable_inputs();
  public:
  void unsafe_arena_set_allocated_inputs(
      ::ls::proto::ginac::lst* inputs);
  ::ls::proto::ginac::lst* unsafe_arena_release_inputs();

  // optional .ls.proto.ginac.symbol time = 4;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const ::ls::proto::ginac::symbol& time() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::ls::proto::ginac::symbol* release_time();
  ::ls::proto::ginac::symbol* mutable_time();
  void set_allocated_time(::ls::proto::ginac::symbol* time);
  private:
  const ::ls::proto::ginac::symbol& _internal_time() const;
  ::ls::proto::ginac::symbol* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::ls::proto::ginac::symbol* time);
  ::ls::proto::ginac::symbol* unsafe_arena_release_time();

  // @@protoc_insertion_point(class_scope:ls.proto.symbolic.OrdinaryDifferentialEquation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ls::proto::ginac::lst* functions_;
  ::ls::proto::ginac::lst* states_;
  ::ls::proto::ginac::lst* inputs_;
  ::ls::proto::ginac::symbol* time_;
  friend struct ::TableStruct_ls_2eproto_2esymbolic_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OrdinaryDifferentialEquation

// optional .ls.proto.ginac.lst functions = 1;
inline bool OrdinaryDifferentialEquation::_internal_has_functions() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || functions_ != nullptr);
  return value;
}
inline bool OrdinaryDifferentialEquation::has_functions() const {
  return _internal_has_functions();
}
inline const ::ls::proto::ginac::lst& OrdinaryDifferentialEquation::_internal_functions() const {
  const ::ls::proto::ginac::lst* p = functions_;
  return p != nullptr ? *p : reinterpret_cast<const ::ls::proto::ginac::lst&>(
      ::ls::proto::ginac::_lst_default_instance_);
}
inline const ::ls::proto::ginac::lst& OrdinaryDifferentialEquation::functions() const {
  // @@protoc_insertion_point(field_get:ls.proto.symbolic.OrdinaryDifferentialEquation.functions)
  return _internal_functions();
}
inline void OrdinaryDifferentialEquation::unsafe_arena_set_allocated_functions(
    ::ls::proto::ginac::lst* functions) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(functions_);
  }
  functions_ = functions;
  if (functions) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ls.proto.symbolic.OrdinaryDifferentialEquation.functions)
}
inline ::ls::proto::ginac::lst* OrdinaryDifferentialEquation::release_functions() {
  _has_bits_[0] &= ~0x00000001u;
  ::ls::proto::ginac::lst* temp = functions_;
  functions_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ls::proto::ginac::lst* OrdinaryDifferentialEquation::unsafe_arena_release_functions() {
  // @@protoc_insertion_point(field_release:ls.proto.symbolic.OrdinaryDifferentialEquation.functions)
  _has_bits_[0] &= ~0x00000001u;
  ::ls::proto::ginac::lst* temp = functions_;
  functions_ = nullptr;
  return temp;
}
inline ::ls::proto::ginac::lst* OrdinaryDifferentialEquation::_internal_mutable_functions() {
  _has_bits_[0] |= 0x00000001u;
  if (functions_ == nullptr) {
    auto* p = CreateMaybeMessage<::ls::proto::ginac::lst>(GetArenaForAllocation());
    functions_ = p;
  }
  return functions_;
}
inline ::ls::proto::ginac::lst* OrdinaryDifferentialEquation::mutable_functions() {
  // @@protoc_insertion_point(field_mutable:ls.proto.symbolic.OrdinaryDifferentialEquation.functions)
  return _internal_mutable_functions();
}
inline void OrdinaryDifferentialEquation::set_allocated_functions(::ls::proto::ginac::lst* functions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(functions_);
  }
  if (functions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(functions));
    if (message_arena != submessage_arena) {
      functions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, functions, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  functions_ = functions;
  // @@protoc_insertion_point(field_set_allocated:ls.proto.symbolic.OrdinaryDifferentialEquation.functions)
}

// optional .ls.proto.ginac.lst states = 2;
inline bool OrdinaryDifferentialEquation::_internal_has_states() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || states_ != nullptr);
  return value;
}
inline bool OrdinaryDifferentialEquation::has_states() const {
  return _internal_has_states();
}
inline const ::ls::proto::ginac::lst& OrdinaryDifferentialEquation::_internal_states() const {
  const ::ls::proto::ginac::lst* p = states_;
  return p != nullptr ? *p : reinterpret_cast<const ::ls::proto::ginac::lst&>(
      ::ls::proto::ginac::_lst_default_instance_);
}
inline const ::ls::proto::ginac::lst& OrdinaryDifferentialEquation::states() const {
  // @@protoc_insertion_point(field_get:ls.proto.symbolic.OrdinaryDifferentialEquation.states)
  return _internal_states();
}
inline void OrdinaryDifferentialEquation::unsafe_arena_set_allocated_states(
    ::ls::proto::ginac::lst* states) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(states_);
  }
  states_ = states;
  if (states) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ls.proto.symbolic.OrdinaryDifferentialEquation.states)
}
inline ::ls::proto::ginac::lst* OrdinaryDifferentialEquation::release_states() {
  _has_bits_[0] &= ~0x00000002u;
  ::ls::proto::ginac::lst* temp = states_;
  states_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ls::proto::ginac::lst* OrdinaryDifferentialEquation::unsafe_arena_release_states() {
  // @@protoc_insertion_point(field_release:ls.proto.symbolic.OrdinaryDifferentialEquation.states)
  _has_bits_[0] &= ~0x00000002u;
  ::ls::proto::ginac::lst* temp = states_;
  states_ = nullptr;
  return temp;
}
inline ::ls::proto::ginac::lst* OrdinaryDifferentialEquation::_internal_mutable_states() {
  _has_bits_[0] |= 0x00000002u;
  if (states_ == nullptr) {
    auto* p = CreateMaybeMessage<::ls::proto::ginac::lst>(GetArenaForAllocation());
    states_ = p;
  }
  return states_;
}
inline ::ls::proto::ginac::lst* OrdinaryDifferentialEquation::mutable_states() {
  // @@protoc_insertion_point(field_mutable:ls.proto.symbolic.OrdinaryDifferentialEquation.states)
  return _internal_mutable_states();
}
inline void OrdinaryDifferentialEquation::set_allocated_states(::ls::proto::ginac::lst* states) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(states_);
  }
  if (states) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(states));
    if (message_arena != submessage_arena) {
      states = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, states, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  states_ = states;
  // @@protoc_insertion_point(field_set_allocated:ls.proto.symbolic.OrdinaryDifferentialEquation.states)
}

// optional .ls.proto.ginac.lst inputs = 3;
inline bool OrdinaryDifferentialEquation::_internal_has_inputs() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || inputs_ != nullptr);
  return value;
}
inline bool OrdinaryDifferentialEquation::has_inputs() const {
  return _internal_has_inputs();
}
inline const ::ls::proto::ginac::lst& OrdinaryDifferentialEquation::_internal_inputs() const {
  const ::ls::proto::ginac::lst* p = inputs_;
  return p != nullptr ? *p : reinterpret_cast<const ::ls::proto::ginac::lst&>(
      ::ls::proto::ginac::_lst_default_instance_);
}
inline const ::ls::proto::ginac::lst& OrdinaryDifferentialEquation::inputs() const {
  // @@protoc_insertion_point(field_get:ls.proto.symbolic.OrdinaryDifferentialEquation.inputs)
  return _internal_inputs();
}
inline void OrdinaryDifferentialEquation::unsafe_arena_set_allocated_inputs(
    ::ls::proto::ginac::lst* inputs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inputs_);
  }
  inputs_ = inputs;
  if (inputs) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ls.proto.symbolic.OrdinaryDifferentialEquation.inputs)
}
inline ::ls::proto::ginac::lst* OrdinaryDifferentialEquation::release_inputs() {
  _has_bits_[0] &= ~0x00000004u;
  ::ls::proto::ginac::lst* temp = inputs_;
  inputs_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ls::proto::ginac::lst* OrdinaryDifferentialEquation::unsafe_arena_release_inputs() {
  // @@protoc_insertion_point(field_release:ls.proto.symbolic.OrdinaryDifferentialEquation.inputs)
  _has_bits_[0] &= ~0x00000004u;
  ::ls::proto::ginac::lst* temp = inputs_;
  inputs_ = nullptr;
  return temp;
}
inline ::ls::proto::ginac::lst* OrdinaryDifferentialEquation::_internal_mutable_inputs() {
  _has_bits_[0] |= 0x00000004u;
  if (inputs_ == nullptr) {
    auto* p = CreateMaybeMessage<::ls::proto::ginac::lst>(GetArenaForAllocation());
    inputs_ = p;
  }
  return inputs_;
}
inline ::ls::proto::ginac::lst* OrdinaryDifferentialEquation::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable:ls.proto.symbolic.OrdinaryDifferentialEquation.inputs)
  return _internal_mutable_inputs();
}
inline void OrdinaryDifferentialEquation::set_allocated_inputs(::ls::proto::ginac::lst* inputs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(inputs_);
  }
  if (inputs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inputs));
    if (message_arena != submessage_arena) {
      inputs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inputs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  inputs_ = inputs;
  // @@protoc_insertion_point(field_set_allocated:ls.proto.symbolic.OrdinaryDifferentialEquation.inputs)
}

// optional .ls.proto.ginac.symbol time = 4;
inline bool OrdinaryDifferentialEquation::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || time_ != nullptr);
  return value;
}
inline bool OrdinaryDifferentialEquation::has_time() const {
  return _internal_has_time();
}
inline const ::ls::proto::ginac::symbol& OrdinaryDifferentialEquation::_internal_time() const {
  const ::ls::proto::ginac::symbol* p = time_;
  return p != nullptr ? *p : reinterpret_cast<const ::ls::proto::ginac::symbol&>(
      ::ls::proto::ginac::_symbol_default_instance_);
}
inline const ::ls::proto::ginac::symbol& OrdinaryDifferentialEquation::time() const {
  // @@protoc_insertion_point(field_get:ls.proto.symbolic.OrdinaryDifferentialEquation.time)
  return _internal_time();
}
inline void OrdinaryDifferentialEquation::unsafe_arena_set_allocated_time(
    ::ls::proto::ginac::symbol* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  time_ = time;
  if (time) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ls.proto.symbolic.OrdinaryDifferentialEquation.time)
}
inline ::ls::proto::ginac::symbol* OrdinaryDifferentialEquation::release_time() {
  _has_bits_[0] &= ~0x00000008u;
  ::ls::proto::ginac::symbol* temp = time_;
  time_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ls::proto::ginac::symbol* OrdinaryDifferentialEquation::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:ls.proto.symbolic.OrdinaryDifferentialEquation.time)
  _has_bits_[0] &= ~0x00000008u;
  ::ls::proto::ginac::symbol* temp = time_;
  time_ = nullptr;
  return temp;
}
inline ::ls::proto::ginac::symbol* OrdinaryDifferentialEquation::_internal_mutable_time() {
  _has_bits_[0] |= 0x00000008u;
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<::ls::proto::ginac::symbol>(GetArenaForAllocation());
    time_ = p;
  }
  return time_;
}
inline ::ls::proto::ginac::symbol* OrdinaryDifferentialEquation::mutable_time() {
  // @@protoc_insertion_point(field_mutable:ls.proto.symbolic.OrdinaryDifferentialEquation.time)
  return _internal_mutable_time();
}
inline void OrdinaryDifferentialEquation::set_allocated_time(::ls::proto::ginac::symbol* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time));
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:ls.proto.symbolic.OrdinaryDifferentialEquation.time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace symbolic
}  // namespace proto
}  // namespace ls

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ls_2eproto_2esymbolic_2eproto
